Description: MasterPatch
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 nlopt (2.7.0-1) UNRELEASED; urgency=low
 .
   * Initial release. Closes: #nnnn
     <nnnn is the bug number of your ITP>
Author: CyberVitexus <info@vitexsoftware.cz>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-05-19

--- nlopt-2.7.0.orig/.travis.yml
+++ nlopt-2.7.0/.travis.yml
@@ -22,7 +22,7 @@ matrix:
         - pip install mkdocs python-markdown-math --user
         - PATH=$PATH:~/.local/bin mkdocs build
         - mkdir build && pushd build
-        - cmake -DCMAKE_INSTALL_PREFIX=~/.local -DNLOPT_MATLAB=OFF -DNLOPT_FORTRAN=ON -DCMAKE_C_FLAGS='-std=c89 -pedantic -D_POSIX_C_SOURCE=200112L -Wall -Wextra -Werror' -DCMAKE_CXX_FLAGS='-Wall -Wextra' ..
+        - cmake -DCMAKE_INSTALL_PREFIX=~/.local -DNLOPT_MATLAB=OFF -DNLOPT_FORTRAN=ON -DCMAKE_C_FLAGS='-std=c89 -pedantic -D_POSIX_C_SOURCE=200809L -Wall -Wextra -Werror' -DCMAKE_CXX_FLAGS='-Wall -Wextra' ..
         - make install -j2 && ctest -j2 --output-on-failure
         - rm -rf * ~/.local
         - cmake -DCMAKE_INSTALL_PREFIX=~/.local -DNLOPT_PYTHON=OFF -DNLOPT_OCTAVE=OFF -DNLOPT_GUILE=OFF -DNLOPT_MATLAB=OFF -DNLOPT_FORTRAN=ON -DCMAKE_TOOLCHAIN_FILE=$PWD/../cmake/toolchain-x86_64-w64-mingw32.cmake ..
@@ -30,8 +30,8 @@ matrix:
 
     - os: osx
       install:
-        - brew update
-        - brew install swig octave guile || echo "nope"
+        #- brew update
+        - HOMEBREW_NO_AUTO_UPDATE=1 brew install swig octave guile || echo "nope"
       script:
         - mkdir build && pushd build
         - cmake -DCMAKE_INSTALL_PREFIX=~/.local -DPYTHON_EXECUTABLE=/usr/bin/python -DNLOPT_FORTRAN=ON ..
--- nlopt-2.7.0.orig/CMakeLists.txt
+++ nlopt-2.7.0/CMakeLists.txt
@@ -12,7 +12,7 @@
 # Benoit Scherrer, 2010 CRL, Harvard Medical School
 # Copyright (c) 2008-2009 Children's Hospital Boston
 #==============================================================================
-cmake_minimum_required (VERSION 2.8.11)
+cmake_minimum_required (VERSION 3.2)
 
 if (NOT DEFINED CMAKE_BUILD_TYPE)
   set (CMAKE_BUILD_TYPE Release CACHE STRING "Build type")
@@ -297,7 +297,7 @@ install ( TARGETS ${nlopt_lib}
           ARCHIVE DESTINATION ${RELATIVE_INSTALL_LIB_DIR}
         )
 
-if (MSVC AND BUILD_SHARED_LIBS AND NOT CMAKE_VERSION VERSION_LESS 3.1)
+if (MSVC AND BUILD_SHARED_LIBS)
   install (FILES $<TARGET_PDB_FILE:${nlopt_lib}> DESTINATION ${RELATIVE_INSTALL_BIN_DIR} CONFIGURATIONS Debug RelWithDebInfo COMPONENT Debug)
 endif ()
 
--- nlopt-2.7.0.orig/README.md
+++ nlopt-2.7.0/README.md
@@ -14,7 +14,7 @@ https://nlopt.readthedocs.io/en/latest/)
 NLopt is compiled and installed with the [CMake](https://cmake.org/) build system
 (see `CMakeLists.txt` file for available options):
 
-    git clone git://github.com/stevengj/nlopt
+    git clone https://github.com/stevengj/nlopt.git
     cd nlopt
     mkdir build
     cd build
--- nlopt-2.7.0.orig/cmake/FindGuile.cmake
+++ nlopt-2.7.0/cmake/FindGuile.cmake
@@ -18,6 +18,7 @@
 # Macports for OSX puts things in /opt/local
 find_path (GUILE_INCLUDE_DIR libguile.h
   PATH_SUFFIXES
+    guile/3.0
     guile/2.2
     guile/2.0
     guile/1.8
@@ -27,7 +28,7 @@ find_path (GUILE_INCLUDE_DIR libguile.h
 )
 
 # Look for the library
-find_library (GUILE_LIBRARY NAMES guile-2.2 guile-2.0 guile
+find_library (GUILE_LIBRARY NAMES guile-3.0 guile-2.2 guile-2.0 guile
   HINTS
     /opt/local/lib
 )
--- nlopt-2.7.0.orig/cmake/NLoptConfig.cmake.in
+++ nlopt-2.7.0/cmake/NLoptConfig.cmake.in
@@ -1,9 +1,4 @@
 
-# defined since 2.8.3
-if (CMAKE_VERSION VERSION_LESS 2.8.3)
-  get_filename_component (CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)
-endif ()
-
 # Tell the user project where to find our headers and libraries
 
 set (NLOPT_VERSION "@NLOPT_VERSION_STRING@")
@@ -23,6 +18,3 @@ include ("${CMAKE_CURRENT_LIST_DIR}/NLop
 # These are IMPORTED targets created by NLOPTLibraryDepends.cmake
 set (NLOPT_LIBRARIES "@NLOPT_LIBRARIES@")
 
-if (CMAKE_VERSION VERSION_LESS 2.8.3)
-  set (CMAKE_CURRENT_LIST_DIR)
-endif ()
--- nlopt-2.7.0.orig/cmake/TargetLinkLibrariesWithDynamicLookup.cmake
+++ nlopt-2.7.0/cmake/TargetLinkLibrariesWithDynamicLookup.cmake
@@ -58,7 +58,7 @@ extern int bar(void);
 int foo(void) {return bar()+1;}
 ")
 
-    if(APPLE AND ${CMAKE_VERSION} VERSION_GREATER 2.8.11)
+    if(APPLE)
       set( _rpath_arg  "-DCMAKE_MACOSX_RPATH='${CMAKE_MACOSX_RPATH}'" )
     else()
       set( _rpath_arg )
--- nlopt-2.7.0.orig/cmake/generate-cpp.cmake
+++ nlopt-2.7.0/cmake/generate-cpp.cmake
@@ -1,4 +1,4 @@
-cmake_minimum_required (VERSION 2.8.11)
+cmake_minimum_required (VERSION 3.2)
 
 # generate nlopt.hpp from nlopt-in.hpp
 file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/nlopt.hpp "")
--- nlopt-2.7.0.orig/cmake/generate-fortran.cmake
+++ nlopt-2.7.0/cmake/generate-fortran.cmake
@@ -1,4 +1,4 @@
-cmake_minimum_required (VERSION 2.8.11)
+cmake_minimum_required (VERSION 3.2)
 
 # generate nlopt.f from nlopt.h enums
 file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/nlopt.f "")
--- nlopt-2.7.0.orig/doc/docs/NLopt_Algorithms.md
+++ nlopt-2.7.0/doc/docs/NLopt_Algorithms.md
@@ -316,7 +316,7 @@ specified using the [`nlopt_set_param` A
 
 * `inner_maxeval`: If ≥ 0, gives maximum number of "inner" iterations of the algorithm where it tries to ensure that its approximatations are "conservative"; defaults to `0` (no limit).   It can be useful to specify a finite number (e.g. `5` or `10`) for this parameter if inaccuracies in your gradient or objective function are preventing the algorithm from making progress.
 * `dual_algorithm` (defaults to `NLOPT_LD_MMA`), `dual_ftol_rel` (defaults to `1e-14`), `dual_ftol_abs` (defaults to `0`), `dual_xtol_rel` (defaults to `0`), `dual_xtol_abs` (defaults to `0`), `dual_maxeval` (defaults to `100000`): These specify how the algorithm internally solves the "dual" optimization problem for its approximate objective.   Because this subsidiary solve requires no evaluations of the user's objective function, it is typically fast enough that we can solve it to high precision without worrying too much about the details.  Howeve,r in high-dimensional problems you may notice that MMA/CCSA is taking a long time between optimization steps, in which case you may want to increase `dual_ftol_rel` or make other changes.   If these parameters are not specified, NLopt takes them from the [subsidiary-optimizer algorithm](NLopt_Reference#localsubsidiary-optimization-algorithm) if that has been specified, and otherwise uses the defaults indicated here.
-* `verbosity`: If ≥ 0, causes the algorithm to print internal status information on each iteration.
+* `verbosity`: If > 0, causes the algorithm to print internal status information on each iteration.
 
 ### SLSQP
 
--- nlopt-2.7.0.orig/doc/docs/NLopt_Introduction.md
+++ nlopt-2.7.0/doc/docs/NLopt_Introduction.md
@@ -80,7 +80,7 @@ $$h_i(\mathbf{x}) = 0$$.
 
 In *principle*, each equality constraint can be expressed by two inequality constraints $h_i(\mathbf{x}) \leq 0$ and $-h_i(\mathbf{x}) \leq 0$, so you might think that any code that can handle inequality constraints can automatically handle equality constraints. In practice, this is not true—if you try to express an equality constraint as a pair of nonlinear inequality constraints, some algorithms will fail to converge.
 
-Equality constraints sometimes require special handling because they reduce the *dimensionality* of the feasible region, and not just its size as for an inequality constraint. Only some of the NLopt algorithms (AUGLAG, COBYLA, and ISRES) currently support nonlinear equality constraints.
+Equality constraints sometimes require special handling because they reduce the *dimensionality* of the feasible region, and not just its size as for an inequality constraint. Only some of the NLopt algorithms (AUGLAG, SLSQP, COBYLA, and ISRES) currently support nonlinear equality constraints.
 
 #### Elimination
 
--- nlopt-2.7.0.orig/src/algs/bobyqa/bobyqa.c
+++ nlopt-2.7.0/src/algs/bobyqa/bobyqa.c
@@ -3123,9 +3123,11 @@ nlopt_result bobyqa(int n, int npt, doub
 
     /* SGJ, 2009: compute rhoend from NLopt stop info */
     rhoend = stop->xtol_rel * (rhobeg);
-    for (j = 0; j < n; ++j)
-	 if (rhoend < stop->xtol_abs[j] / fabs(s[j]))
-	      rhoend = stop->xtol_abs[j] / fabs(s[j]);
+    if (stop->xtol_abs) {
+        for (j = 0; j < n; ++j)
+         if (rhoend < stop->xtol_abs[j] / fabs(s[j]))
+              rhoend = stop->xtol_abs[j] / fabs(s[j]);
+    }
 
 
 /*     This subroutine seeks the least value of a function of many variables, */
--- nlopt-2.7.0.orig/src/algs/cdirect/cdirect.c
+++ nlopt-2.7.0/src/algs/cdirect/cdirect.c
@@ -383,7 +383,7 @@ static int small(double *w, params *p)
 {
      int i;
      for (i = 0; i < p->n; ++i)
-	  if (w[i] > p->stop->xtol_abs[i] &&
+	  if (w[i] > (p->stop->xtol_abs ? p->stop->xtol_abs[i] : 0) &&
 	      w[i] > (p->ub[i] - p->lb[i]) * p->stop->xtol_rel)
 	       return 0;
      return 1;
@@ -575,21 +575,24 @@ nlopt_result cdirect(int n, nlopt_func f
 {
      cdirect_uf_data d;
      nlopt_result ret;
-     const double *xtol_abs_save;
+     const double *xtol_abs_save = NULL;
      int i;
 
      d.f = f; d.f_data = f_data; d.lb = lb; d.ub = ub;
-     d.x = (double *) malloc(sizeof(double) * n*4);
+     d.x = (double *) malloc(sizeof(double) * n * (stop->xtol_abs ? 4 : 3));
      if (!d.x) return NLOPT_OUT_OF_MEMORY;
      
      for (i = 0; i < n; ++i) {
 	  x[i] = (x[i] - lb[i]) / (ub[i] - lb[i]);
 	  d.x[n+i] = 0;
 	  d.x[2*n+i] = 1;
-	  d.x[3*n+i] = stop->xtol_abs[i] / (ub[i] - lb[i]);
      }
-     xtol_abs_save = stop->xtol_abs;
-     stop->xtol_abs = d.x + 3*n;
+     if (stop->xtol_abs) {
+       for (i = 0; i < n; ++i)
+         d.x[3*n+i] = stop->xtol_abs[i] / (ub[i] - lb[i]);
+       xtol_abs_save = stop->xtol_abs;
+       stop->xtol_abs = d.x + 3*n;
+     }
      ret = cdirect_unscaled(n, cdirect_uf, &d, d.x+n, d.x+2*n, x, minf, stop,
 			    magic_eps, which_alg);
      stop->xtol_abs = xtol_abs_save;
--- nlopt-2.7.0.orig/src/algs/cdirect/hybrid.c
+++ nlopt-2.7.0/src/algs/cdirect/hybrid.c
@@ -152,7 +152,7 @@ static nlopt_result divide_largest(param
      /* check xtol */
      for (i = 0; i < n; ++i)
 	  if (w[i] > p->stop->xtol_rel * (ub[i] - lb[i])
-	      && w[i] > p->stop->xtol_abs[i])
+	      && w[i] > (p->stop->xtol_abs ? p->stop->xtol_abs[i] : 0))
 	       break;
      if (i == n) return NLOPT_XTOL_REACHED;
 
@@ -316,21 +316,24 @@ nlopt_result cdirect_hybrid(int n, nlopt
 {
      cdirect_uf_data d;
      nlopt_result ret;
-     const double *xtol_abs_save;
+     const double *xtol_abs_save = NULL;
      int i;
 
      d.f = f; d.f_data = f_data; d.lb = lb; d.ub = ub;
-     d.x = (double *) malloc(sizeof(double) * n*4);
+     d.x = (double *) malloc(sizeof(double) * n * (stop->xtol_abs ? 4 : 3));
      if (!d.x) return NLOPT_OUT_OF_MEMORY;
 
      for (i = 0; i < n; ++i) {
 	  x[i] = (x[i] - lb[i]) / (ub[i] - lb[i]);
 	  d.x[n+i] = 0;
 	  d.x[2*n+i] = 1;
-	  d.x[3*n+i] = stop->xtol_abs[i] / (ub[i] - lb[i]);
      }
-     xtol_abs_save = stop->xtol_abs;
-     stop->xtol_abs = d.x + 3*n;
+     if (stop->xtol_abs) {
+         for (i = 0; i < n; ++i)
+          d.x[3*n+i] = stop->xtol_abs[i] / (ub[i] - lb[i]);
+         xtol_abs_save = stop->xtol_abs;
+         stop->xtol_abs = d.x + 3*n;
+     }
      ret = cdirect_hybrid_unscaled(n, cdirect_uf, &d, d.x+n, d.x+2*n,
 				   x, minf, stop, local_alg, local_maxeval,
 				   randomized_div);
--- nlopt-2.7.0.orig/src/algs/cobyla/cobyla.c
+++ nlopt-2.7.0/src/algs/cobyla/cobyla.c
@@ -219,9 +219,10 @@ nlopt_result cobyla_minimize(unsigned n,
      /* SGJ, 2008: compute rhoend from NLopt stop info */
      rhobeg = fabs(dx[0] / s.scale[0]);
      rhoend = stop->xtol_rel * (rhobeg);
-     for (j = 0; j < n; ++j)
-	  if (rhoend < stop->xtol_abs[j] / fabs(s.scale[j]))
-	       rhoend = stop->xtol_abs[j] / fabs(s.scale[j]);
+     if (stop->xtol_abs)
+      for (j = 0; j < n; ++j)
+	   if (rhoend < stop->xtol_abs[j] / fabs(s.scale[j]))
+	        rhoend = stop->xtol_abs[j] / fabs(s.scale[j]);
 
      /* each equality constraint gives two inequality constraints */
      m = nlopt_count_constraints(m, fc) + 2 * nlopt_count_constraints(p, h);
--- nlopt-2.7.0.orig/src/algs/neldermead/sbplx.c
+++ nlopt-2.7.0/src/algs/neldermead/sbplx.c
@@ -195,7 +195,7 @@ nlopt_result sbplx_minimize(int n, nlopt
 		  the step size is too large (in early iterations),
 		  the inner Nelder-Mead may not make much progress */
 	       for (j = 0; j < n; ++j)
-		    if (fabs(xstep[j]) * psi > stop->xtol_abs[j]
+		    if (fabs(xstep[j]) * psi > (stop->xtol_abs ? stop->xtol_abs[j] : 0)
 			&& fabs(xstep[j]) * psi > stop->xtol_rel * fabs(x[j]))
 			 break;
 	       if (j == n) {
--- nlopt-2.7.0.orig/src/algs/newuoa/newuoa.c
+++ nlopt-2.7.0/src/algs/newuoa/newuoa.c
@@ -1626,9 +1626,10 @@ static nlopt_result newuob_(int *n, int
 
 /* SGJ, 2008: compute rhoend from NLopt stop info */
     rhoend = stop->xtol_rel * (*rhobeg);
-    for (j = 0; j < *n; ++j)
-	 if (rhoend < stop->xtol_abs[j])
-	      rhoend = stop->xtol_abs[j];
+    if (stop->xtol_abs)
+     for (j = 0; j < *n; ++j)
+	  if (rhoend < stop->xtol_abs[j])
+	       rhoend = stop->xtol_abs[j];
 
 /* The arguments N, NPT, X, RHOBEG, RHOEND, IPRINT and MAXFUN are identical */
 /*   to the corresponding arguments in SUBROUTINE NEWUOA. */
--- nlopt-2.7.0.orig/src/algs/praxis/praxis.c
+++ nlopt-2.7.0/src/algs/praxis/praxis.c
@@ -189,7 +189,8 @@ nlopt_result praxis_(double t0, double m
 	 t_old = small + t0;
     else {
 	 t_old = 0;
-	 for (i__ = 0; i__ < n; ++i__)
+	 if (stop->xtol_abs)
+	  for (i__ = 0; i__ < n; ++i__)
 	      if (stop->xtol_abs[i__] > t_old)
 		   t_old = stop->xtol_abs[i__];
 	 t_old += small;
--- nlopt-2.7.0.orig/src/api/optimize.c
+++ nlopt-2.7.0/src/api/optimize.c
@@ -622,7 +622,7 @@ static nlopt_result nlopt_optimize_(nlop
             }
             if (opt->dx)
                 nlopt_set_initial_step(local_opt, opt->dx);
-            for (i = 0; i < n && stop.xtol_abs[i] > 0; ++i);
+            for (i = 0; i < n && stop.xtol_abs && stop.xtol_abs[i] > 0; ++i);
             if (local_opt->ftol_rel <= 0 && local_opt->ftol_abs <= 0 && local_opt->xtol_rel <= 0 && i < n) {
                 /* it is not sensible to call MLSL without *some*
                    nonzero tolerance for the local search */
--- nlopt-2.7.0.orig/src/api/options.c
+++ nlopt-2.7.0/src/api/options.c
@@ -116,12 +116,8 @@ nlopt_opt NLOPT_STDCALL nlopt_create(nlo
             opt->ub = (double *) calloc(n, sizeof(double));
             if (!opt->ub)
                 goto oom;
-            opt->xtol_abs = (double *) calloc(n, sizeof(double));
-            if (!opt->xtol_abs)
-                goto oom;
             nlopt_set_lower_bounds1(opt, -HUGE_VAL);
             nlopt_set_upper_bounds1(opt, +HUGE_VAL);
-            nlopt_set_xtol_abs1(opt, 0.0);
         }
     }
 
@@ -163,9 +159,11 @@ nlopt_opt NLOPT_STDCALL nlopt_copy(const
             nopt->ub = (double *) malloc(sizeof(double) * (opt->n));
             if (!opt->ub)
                 goto oom;
-            nopt->xtol_abs = (double *) malloc(sizeof(double) * (opt->n));
-            if (!opt->xtol_abs)
-                goto oom;
+            if (opt->xtol_abs) {
+                nopt->xtol_abs = (double *) malloc(sizeof(double) * (opt->n));
+                if (!opt->xtol_abs)
+                    goto oom;
+            }
             if (opt->x_weights) {
                 nopt->x_weights = (double *) malloc(sizeof(double) * (opt->n));
                 if (!opt->x_weights)
@@ -175,7 +173,9 @@ nlopt_opt NLOPT_STDCALL nlopt_copy(const
 
             memcpy(nopt->lb, opt->lb, sizeof(double) * (opt->n));
             memcpy(nopt->ub, opt->ub, sizeof(double) * (opt->n));
-            memcpy(nopt->xtol_abs, opt->xtol_abs, sizeof(double) * (opt->n));
+            if (opt->xtol_abs) {
+                memcpy(nopt->xtol_abs, opt->xtol_abs, sizeof(double) * (opt->n));
+            }
         }
 
         if (opt->m) {
@@ -691,6 +691,10 @@ GETSET(ftol_rel, double, ftol_rel) GETSE
 {
     if (opt) {
         nlopt_unset_errmsg(opt);
+        if (!opt->xtol_abs && opt->n > 0) {
+            opt->xtol_abs = (double *) calloc(opt->n, sizeof(double));
+            if (!opt->xtol_abs) return NLOPT_OUT_OF_MEMORY;
+        }
         memcpy(opt->xtol_abs, xtol_abs, opt->n * sizeof(double));
         return NLOPT_SUCCESS;
     }
@@ -702,6 +706,10 @@ nlopt_result NLOPT_STDCALL nlopt_set_xto
     if (opt) {
         unsigned i;
         nlopt_unset_errmsg(opt);
+        if (!opt->xtol_abs && opt->n > 0) {
+            opt->xtol_abs = (double *) calloc(opt->n, sizeof(double));
+            if (!opt->xtol_abs) return NLOPT_OUT_OF_MEMORY;
+        }
         for (i = 0; i < opt->n; ++i)
             opt->xtol_abs[i] = xtol_abs;
         return NLOPT_SUCCESS;
@@ -713,7 +721,13 @@ nlopt_result NLOPT_STDCALL nlopt_get_xto
 {
     nlopt_unset_errmsg(opt);
     if (opt && (opt->n == 0 || xtol_abs)) {
-        memcpy(xtol_abs, opt->xtol_abs, opt->n * sizeof(double));
+        if (opt->xtol_abs) {
+            memcpy(xtol_abs, opt->xtol_abs, sizeof(double) * (opt->n));
+        } else {
+            unsigned i;
+            for (i = 0; i < opt->n; ++i)
+                xtol_abs[i] = 0;
+        }
         return NLOPT_SUCCESS;
     }
     return NLOPT_INVALID_ARGS;
--- nlopt-2.7.0.orig/src/octave/nlopt_optimize-oct.cc
+++ nlopt-2.7.0/src/octave/nlopt_optimize-oct.cc
@@ -80,7 +80,7 @@ static Matrix struct_val_default(octave_
 }
 
 typedef struct {
-  octave_function *f;
+  octave_value f;
   int neval, verbose;
   nlopt_opt opt;
 } user_function_data;
@@ -99,7 +99,7 @@ static double user_function(unsigned n,
 #if OCTAVE_MAJOR_VERSION > 4 || (OCTAVE_MAJOR_VERSION == 4 && OCTAVE_MINOR_VERSION > 2)
     = octave::feval(data->f, args, gradient ? 2 : 1);
 #else
-    = data->f->do_multi_index_op(gradient ? 2 : 1, args);
+    = data->f.do_multi_index_op(gradient ? 2 : 1, args);
 #endif
   if (res.length() < (gradient ? 2 : 1))
     err_user_supplied_eval("nlopt_optimize");
@@ -131,7 +131,7 @@ static double user_function1(unsigned n,
 			    double *gradient, /* NULL if not needed */
 			    void *data_)
 {
-  octave_function *f = (octave_function *) data_;
+  octave_value* f = static_cast<octave_value*>(data_);
   octave_value_list args(1, 0);
   Matrix xm(1,n);
   for (unsigned i = 0; i < n; ++i)
@@ -139,7 +139,7 @@ static double user_function1(unsigned n,
   args(0) = xm;
   octave_value_list res
 #if OCTAVE_MAJOR_VERSION > 4 || (OCTAVE_MAJOR_VERSION == 4 && OCTAVE_MINOR_VERSION > 2)
-    = octave::feval(f, args, gradient ? 2 : 1);
+    = octave::feval(*f, args, gradient ? 2 : 1);
 #else
     = f->do_multi_index_op(gradient ? 2 : 1, args);
 #endif
@@ -265,23 +265,25 @@ DEFUN_DLD(nlopt_optimize, args, nargout,
     CHECK(opts.contents("min_objective").numel() == 1
 	  && (opts.contents("min_objective"))(0).is_function_handle(),
 	  "opt.min_objective must be a function");
-      d.f = (opts.contents("min_objective"))(0).function_value();
+      d.f = (opts.contents("min_objective"))(0);
       nlopt_set_min_objective(opt, user_function, &d);
   }
   else if (opts.contains("max_objective")) {
     CHECK(opts.contents("max_objective").numel() == 1
 	  && (opts.contents("max_objective"))(0).is_function_handle(),
 	  "opt.max_objective must be a function");
-      d.f = (opts.contents("max_objective"))(0).function_value();
+      d.f = (opts.contents("max_objective"))(0);
       nlopt_set_max_objective(opt, user_function, &d);
   }
   else {
     CHECK(0,"either opt.min_objective or opt.max_objective must exist");
   }
 
+  Cell fc, h;
+  
   if (opts.contains("fc") && opts.contents("fc").numel() == 1) {
     CHECK((opts.contents("fc"))(0).iscell(), "opt.fc must be cell array");
-    Cell fc = (opts.contents("fc"))(0).cell_value();
+    fc = (opts.contents("fc"))(0).cell_value();
     Matrix zeros(1, fc.numel(), 0.0);
     Matrix fc_tol = struct_val_default(opts, "fc_tol", zeros);
     CHECK(fc_tol.numel() == fc.numel(),
@@ -290,7 +292,7 @@ DEFUN_DLD(nlopt_optimize, args, nargout,
       CHECK(fc(i).is_function() || fc(i).is_function_handle(),
 	    "opt.fc must be a cell array of function handles");
       CHECK(nlopt_add_inequality_constraint(opt, user_function1,
-					    fc(i).function_value(),
+					    &fc(i),
 					    fc_tol(i)) > 0,
 	    "nlopt error adding inequality constraint");
     }
@@ -298,7 +300,7 @@ DEFUN_DLD(nlopt_optimize, args, nargout,
 
   if (opts.contains("h") && opts.contents("h").numel() == 1) {
     CHECK((opts.contents("h"))(0).iscell(), "opt.h must be cell array");
-    Cell h = (opts.contents("h"))(0).cell_value();
+    h = (opts.contents("h"))(0).cell_value();
     Matrix zeros(1, h.numel(), 0.0);
     Matrix h_tol = struct_val_default(opts, "h_tol", zeros);
     CHECK(h_tol.numel() == h.numel(),
@@ -307,7 +309,7 @@ DEFUN_DLD(nlopt_optimize, args, nargout,
       CHECK(h(i).is_function() || h(i).is_function_handle(),
 	    "opt.h must be a cell array of function handles");
       CHECK(nlopt_add_equality_constraint(opt, user_function1,
-					    h(i).function_value(),
+					    &h(i),
 					    h_tol(i)) > 0,
 	    "nlopt error adding equality constraint");
     }
--- nlopt-2.7.0.orig/src/util/stop.c
+++ nlopt-2.7.0/src/util/stop.c
@@ -100,6 +100,7 @@ int nlopt_stop_x(const nlopt_stopping *
     unsigned i;
     if (diff_norm(s->n, x, oldx, s->x_weights, NULL, NULL) < s->xtol_rel * vector_norm(s->n, x, s->x_weights, NULL, NULL))
         return 1;
+    if (!s->xtol_abs) return 0;
     for (i = 0; i < s->n; ++i)
         if (fabs(x[i] - oldx[i]) >= s->xtol_abs[i])
             return 0;
@@ -111,6 +112,7 @@ int nlopt_stop_dx(const nlopt_stopping *
     unsigned i;
     if (vector_norm(s->n, dx, s->x_weights, NULL, NULL) < s->xtol_rel * vector_norm(s->n, x, s->x_weights, NULL, NULL))
         return 1;
+    if (!s->xtol_abs) return 0;
     for (i = 0; i < s->n; ++i)
         if (fabs(dx[i]) >= s->xtol_abs[i])
             return 0;
@@ -124,6 +126,7 @@ int nlopt_stop_xs(const nlopt_stopping *
     unsigned i;
     if (diff_norm(s->n, xs, oldxs, s->x_weights, scale_min, scale_max) < s->xtol_rel * vector_norm(s->n, xs, s->x_weights, scale_min, scale_max))
         return 1;
+    if (!s->xtol_abs) return 0;
     for (i = 0; i < s->n; ++i)
         if (fabs(sc(xs[i], scale_min[i], scale_max[i]) - sc(oldxs[i], scale_min[i], scale_max[i])) >= s->xtol_abs[i])
             return 0;
--- nlopt-2.7.0.orig/test/t_tutorial.cxx
+++ nlopt-2.7.0/test/t_tutorial.cxx
@@ -5,8 +5,9 @@
 #include <iomanip>
 #include <nlopt.hpp>
 
-double myvfunc(const std::vector<double> &x, std::vector<double> &grad, void *my_func_data)
+double myvfunc(const std::vector<double> &x, std::vector<double> &grad, void *data)
 {
+  (void)data;
   if (!grad.empty()) {
     grad[0] = 0.0;
     grad[1] = 0.5 / sqrt(x[1]);
